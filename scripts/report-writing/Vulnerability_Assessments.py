# Vulnerability_Assessments.py

"""
Vulnerability Assessments Script

Purpose:
This script is designed to facilitate the process of conducting vulnerability assessments for various assets, 
locations, or systems. The user is prompted to provide details about the asset being assessed, potential threats, 
existing security measures, and observed vulnerabilities. The script then compiles this information into a 
formatted report, highlighting areas of concern and potential mitigation strategies.

Usage:
Run the script and follow the prompts to input the necessary details about the asset and its vulnerabilities. 
At the end, a vulnerability assessment report will be generated and displayed.
"""

# Import necessary libraries
import datetime

def gather_information():
    """
    This function prompts the user for information about the asset's vulnerabilities and security measures.
    """
    asset_name = input("Enter the name of the asset being assessed (e.g., building, system, application): ")
    asset_location = input("Enter the location or domain of the asset (if applicable): ")
    potential_threats = input("List potential threats to the asset (e.g., unauthorized access, data breach): ")
    existing_security = input("Describe existing security measures in place for the asset: ")
    observed_vulnerabilities = input("List any observed vulnerabilities or areas of concern: ")

    return asset_name, asset_location, potential_threats, existing_security, observed_vulnerabilities

def generate_report(asset_name, asset_location, potential_threats, existing_security, observed_vulnerabilities):
    """
    This function generates the Vulnerability Assessment report based on the provided information.
    """
    report_date = datetime.datetime.now().strftime("%Y-%m-%d")
    
    report = f"""
    Vulnerability Assessment Report - {asset_name}
    Date: {report_date}
    Location/Domain: {asset_location}

    1. Potential Threats:
    {potential_threats}

    2. Existing Security Measures:
    {existing_security}

    3. Observed Vulnerabilities:
    {observed_vulnerabilities}

    # TODO: Consider adding a section for recommendations or mitigation strategies based on the observed vulnerabilities.
    """
    
    return report

def main():
    """
    Main function to gather information and generate the Vulnerability Assessment report.
    """
    asset_name, asset_location, potential_threats, existing_security, observed_vulnerabilities = gather_information()
    report = generate_report(asset_name, asset_location, potential_threats, existing_security, observed_vulnerabilities)
    
    # Print the report
    print(report)

    # TODO: Consider adding functionality to save the report to a file or database.

if __name__ == '__main__':
    main()
